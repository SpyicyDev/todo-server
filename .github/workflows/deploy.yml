name: Deploy app to Digital Ocean

on:
  workflow_dispatch:
  release:
    types: [published]

environment: production

jobs:
  deploy:
    name: Deploy to Digital Ocean(terraform)
    runs-on: ubuntu-latest
    outputs:
      uri: ${{ steps.extract.outputs.uri }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
      - name: Wait for current build to finish
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          running-workflow-name: 'Deploy to Digital Ocean(terraform)'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 5
          allowed-conclusions: success,cancelled
      - name: Terraform init
        run: terraform init -backend-config="password=${{github.token}}"
      - name: Terraform destroy(to clear resources for new resources)
        run: terraform destroy -auto-approve -var="do_token=${{secrets.DO_TOKEN}}" -var="cloudflare_api_token=${{secrets.CLOUDFLARE_API_TOKEN}}" -var="cloudflare_zone_id=${{secrets.CLOUDFLARE_ZONE_ID}}"
      - name: Run Terraform
        run: terraform apply -auto-approve -var="do_token=${{secrets.DO_TOKEN}}" -var="cloudflare_api_token=${{secrets.CLOUDFLARE_API_TOKEN}}" -var="cloudflare_zone_id=${{secrets.CLOUDFLARE_ZONE_ID}}"
      - name: Extract DB URI
        id: extract
        run: terraform output -json | jq -r '@sh "uri=\(.db_address.value)"' | echo >> "$GITHUB_OUTPUT"
  sql:
    name: Scaffold DB
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Create Todos table
        run: psql ${{ needs.deploy.outputs.uri }} -c 'CREATE TABLE todos(todo_id INT, todo_text VARCHAR(255));'
      - name: Create ID table
        run: psql ${{ needs.deploy.outputs.uri }} -c 'CREATE TABLE id(id INT);'
      - name: Insert ID into ID Table
        run: psql ${{ needs.deploy.outputs.uri }} -c 'INSERT INTO id (id) VALUES (0);'
