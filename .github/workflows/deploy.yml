name: Deploy app to Digital Ocean

on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  deploy:
    name: Deploy to Digital Ocean(terraform)
    environment: production
    runs-on: ubuntu-latest
    outputs:
      uri: ${{ steps.extract.outputs.uri }}
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Install jq
        run: sudo apt-get -y update && sudo apt-get -y install jq
      - name: Wait for current build to finish
        uses: lewagon/wait-on-check-action@v1.3.1
        with:
          ref: ${{ github.ref }}
          running-workflow-name: 'Deploy to Digital Ocean(terraform)'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 5
          allowed-conclusions: success,cancelled
      - name: Terraform init
        run: terraform init -backend-config="password=${{github.token}}"
      - name: Terraform destroy(to clear resources for new resources)
        run: terraform destroy -auto-approve -var="do_token=${{secrets.DO_TOKEN}}" -var="cloudflare_api_token=${{secrets.CLOUDFLARE_API_TOKEN}}" -var="cloudflare_zone_id=${{secrets.CLOUDFLARE_ZONE_ID}}"
      - name: Run Terraform
        run: terraform apply -auto-approve -var="do_token=${{secrets.DO_TOKEN}}" -var="cloudflare_api_token=${{secrets.CLOUDFLARE_API_TOKEN}}" -var="cloudflare_zone_id=${{secrets.CLOUDFLARE_ZONE_ID}}"
      - name: Extract DB URI
        id: extract
        run: terraform output -json | jq -r ".db_cert.value"
